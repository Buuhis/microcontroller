;#include <stdio.h>
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;#include <math.h>
;
;#define MAX_STRING_LENGTH 20
;#define ADC_VREF_TYPE 0x00
;
;volatile int ticks = 0;
;unsigned long tram, chuc, dvi;
;unsigned long adc_out;
;unsigned long nhiet_do;
;unsigned int count;
;char receivedData[MAX_STRING_LENGTH];
;int index = 0;
;
;void uart_char_send(unsigned char chr);  //chuong trinh con phat mot ky tu
;void uart_string_send(unsigned char *txt);  //chuong trinh con phat mot chuoi ky tu
;void check_string(char *receivedData);
;
;interrupt [EXT_INT0] void ext_int0_isr(void);  // External Interrupt 0 service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void);
;interrupt [USART_RXC] void usart_rx_isr(void);
;
;unsigned int read_adc(unsigned char adc_input);  // Read the AD conversion result
;
;
;void main(void)
; 0000 001F {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0020 PORTA=0x00;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0021 DDRA=0x00;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0022 
; 0000 0023 // Port B initialization
; 0000 0024 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
; 0000 0025 // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=T
; 0000 0026 PORTB=0x00;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0027 DDRB=0x02;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0028 
; 0000 0029 // Port C initialization
; 0000 002A // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 002B // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 002C PORTC=0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002D DDRC=0xFF;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002E 
; 0000 002F // Port D initialization
; 0000 0030 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 0031 // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=0
; 0000 0032 PORTD=0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0033 DDRD=0x02;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0034 
; 0000 0035 // Timer/Counter 1 initialization
; 0000 0036 // Clock source: System Clock
; 0000 0037 // Clock value: 8000.000 kHz
; 0000 0038 // Mode: Normal top=0xFFFF
; 0000 0039 // OC1A output: Discon.
; 0000 003A // OC1B output: Discon.
; 0000 003B // Noise Canceler: Off
; 0000 003C // Input Capture on Falling Edge
; 0000 003D // Timer1 Overflow Interrupt: Off
; 0000 003E // Input Capture Interrupt: Off
; 0000 003F // Compare A Match Interrupt: On
; 0000 0040 // Compare B Match Interrupt: Off
; 0000 0041 TCCR1A=0x00;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0042 TCCR1B=0x0C;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0043 TCNT1H=0x00;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0044 TCNT1L=0x00;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0045 OCR1BH=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0046 OCR1BL=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0047 
; 0000 0048 
; 0000 0049 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 004A TIMSK=0x10;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 004B 
; 0000 004C // External Interrupt(s) initialization
; 0000 004D // INT0: On
; 0000 004E // INT0 Mode: Rising Edge
; 0000 004F // INT1: Off
; 0000 0050 // INT2: Off
; 0000 0051 GICR|=0x40;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0052 MCUCR=0x03;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0053 MCUCSR=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0054 GIFR=0x40;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0055 
; 0000 0056 // USART initialization
; 0000 0057 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0058 // USART Receiver: On
; 0000 0059 // USART Transmitter: On
; 0000 005A // USART Mode: Asynchronous
; 0000 005B // USART Baud Rate: 9600
; 0000 005C UCSRA=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005D UCSRB=0x98;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 005E UCSRC=0x86;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 005F UBRRH=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0060 UBRRL=0x33;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0061 
; 0000 0062 // ADC initialization
; 0000 0063 // ADC Clock frequency: 1000.000 kHz
; 0000 0064 // ADC Voltage Reference: AREF pin
; 0000 0065 // ADC Auto Trigger Source: ADC Stopped
; 0000 0066 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0067 ADCSRA=0x83;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0068 
; 0000 0069 // Global enable interrupts
; 0000 006A #asm("sei")
;PCODE: $00000043 VOL: 0
	sei
;PCODE: $00000044 VOL: 0
; 0000 006B 
; 0000 006C 
; 0000 006D while (1)
;PCODE: $00000045 VOL: 0
; 0000 006E     {
; 0000 006F 
; 0000 0070         adc_out = read_adc(0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0071         nhiet_do = adc_out*500/1023;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0072         chuc = nhiet_do/10;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0073         dvi = (nhiet_do%10);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0074 
; 0000 0075 
; 0000 0076         //uart_string_send("nhiet do la:");
; 0000 0077         uart_char_send(chuc + 0x30);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0078         uart_char_send(dvi + 0x30);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0079         uart_string_send("\r\n");
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 007A 
; 0000 007B         delay_ms(200);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 007C 
; 0000 007D     }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 007E }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0

	.DSEG
_0x6:
	.BYTE 0x3
;
;
;
;
;void uart_char_send(unsigned char chr)
; 0000 0084 {

	.CSEG
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0085     while (!(UCSRA & (1<<UDRE)))   //cho den khi bit UDRE = 1
;	chr -> Y+0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0086     {
; 0000 0087 
; 0000 0088     };
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0089     UDR = chr;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 008A }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;
;void uart_string_send(unsigned char *txt)
; 0000 008E {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 008F     unsigned char n, i;
; 0000 0090     n = strlen(txt); //dem so ky tu
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;	*txt -> Y+2
;	n -> R17
;	i -> R16
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0091         for (i = 0; i < n; i++)
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0092         {
; 0000 0093             uart_char_send(txt[i]); //phat du lieu
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0094         }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0095 }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;
;
;
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 009A {
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 009B     count++;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 009C 
; 0000 009D     tram = count/ 100;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 009E     chuc = (count % 100)/ 10;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 009F     dvi = count % 10;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00A0 
; 0000 00A1 
; 0000 00A2     uart_string_send("count:");
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00A3     uart_char_send(tram + 0x30);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00A4     uart_char_send(chuc + 0x30);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00A5     uart_char_send(dvi + 0x30);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00A6 
; 0000 00A7     uart_string_send("\r\n");
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00A8 }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0

	.DSEG
_0xE:
	.BYTE 0xA
;
;
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 00AC {

	.CSEG
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00AD     PORTB ^= (1 << PORTB1);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00AE }
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;
;
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 00B2 {
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00B3     char data = UDR;
; 0000 00B4     uart_char_send(data);
;PCODE: $000000D6 VOL: 0
;	data -> R17
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00B5 
; 0000 00B6     if (data == '\n' || data == '\r')
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00B7     {
; 0000 00B8         receivedData[index] = '\0';
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00B9         check_string(receivedData);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00BA 
; 0000 00BB         index = 0;
;PCODE: $000000EA VOL: 0
; 0000 00BC     }
; 0000 00BD     else
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00BE     {
; 0000 00BF         if (index < MAX_STRING_LENGTH - 1)
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00C0         {
; 0000 00C1             receivedData[index++] = data;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00C2         }
; 0000 00C3     }
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00C4 }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;
;
;
;void check_string(char *receivedData)
; 0000 00C9 {
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00CA     if (strstr(receivedData, "led1 on") != NULL)
;	*receivedData -> Y+0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00CB     {
; 0000 00CC         PORTC |= 0b00000001;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00CD     }
; 0000 00CE     if (strstr(receivedData, "led1 off") != NULL)
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00CF     {
; 0000 00D0         PORTC &= ~0b00000001;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00D1     }
; 0000 00D2     if (strstr(receivedData, "led2 on") != NULL)
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00D3     {
; 0000 00D4         PORTC |= 0b00000010;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00D5     }
; 0000 00D6     if (strstr(receivedData, "led2 off") != NULL)
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00D7     {
; 0000 00D8         PORTC &= ~0b00000010;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00D9     }
; 0000 00DA     if (strstr(receivedData, "led3 on") != NULL)
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00DB     {
; 0000 00DC         PORTC |= 0b00000100;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00DD     }
; 0000 00DE     if (strstr(receivedData, "led3 off") != NULL)
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00DF     {
; 0000 00E0         PORTC &= ~0b00000100;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00E1     }
; 0000 00E2     if (strstr(receivedData, "led4 on") != NULL)
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00E3     {
; 0000 00E4         PORTC |= 0b00001000;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00E5     }
; 0000 00E6     if (strstr(receivedData, "led4 off") != NULL)
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00E7     {
; 0000 00E8         PORTC &= ~0b00001000;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00E9     }
; 0000 00EA     if (strstr(receivedData, "led5 on") != NULL)
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00EB     {
; 0000 00EC         PORTC |= 0b00010000;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00ED     }
; 0000 00EE     if (strstr(receivedData, "led5 off") != NULL)
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00EF     {
; 0000 00F0         PORTC &= ~0b00010000;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00F1     }
; 0000 00F2     if (strstr(receivedData, "led6 on") != NULL)
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00F3     {
; 0000 00F4         PORTC |= 0b00100000;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00F5     }
; 0000 00F6     if (strstr(receivedData, "led6 off") != NULL)
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00F7     {
; 0000 00F8         PORTC &= ~0b00100000;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00F9     }
; 0000 00FA     if (strstr(receivedData, "led7 on") != NULL)
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00FB     {
; 0000 00FC         PORTC |= 0b01000000;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00FD     }
; 0000 00FE     if (strstr(receivedData, "led7 off") != NULL)
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00FF     {
; 0000 0100         PORTC &= ~0b01000000;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0101     }
; 0000 0102     if (strstr(receivedData, "led8 on") != NULL)
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0103     {
; 0000 0104         PORTC |= 0b10000000;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 0105     }
; 0000 0106     if (strstr(receivedData, "led8 off") != NULL)
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0107     {
; 0000 0108         PORTC &= ~0b10000000;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 0109     }
; 0000 010A 
; 0000 010B 
; 0000 010C     if (strncmp(receivedData, "set time", 8) == 0)
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 010D     {
; 0000 010E         ticks = atoi(receivedData + 9);
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 1
; 0000 010F 
; 0000 0110         ticks = (ticks < 5) ? ticks : 5;
;PCODE: $000001BD VOL: 1
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 1
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 1
; 0000 0111         ticks = (ticks > 0.5) ? ticks : 0.5;
;PCODE: $000001C7 VOL: 1
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 1
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 1
; 0000 0112 
; 0000 0113         // Convert time to ticks
; 0000 0114         ticks = (int)floor(ticks * 8000000 / 256);
;PCODE: $000001D4 VOL: 1
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 1
; 0000 0115 
; 0000 0116         OCR1AH = (unsigned char)(ticks >> 8);
;PCODE: $000001E0 VOL: 1
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0117         OCR1AL = (unsigned char)ticks;
;PCODE: $000001E3 VOL: 1
;PCODE: $000001E4 VOL: 0
; 0000 0118     }
; 0000 0119 }
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0

	.DSEG
_0x15:
	.BYTE 0x91
;
;
;
;unsigned int read_adc(unsigned char adc_input)
; 0000 011E {

	.CSEG
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 011F ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0120 // Delay needed for the stabilization of the ADC input voltage
; 0000 0121 delay_us(10);
;PCODE: $000001EE VOL: 0
; 0000 0122 // Start the AD conversion
; 0000 0123 ADCSRA|=0x40;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0124 // Wait for the AD conversion to complete
; 0000 0125 while ((ADCSRA & 0x10)==0);
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0126 ADCSRA|=0x10;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0127 return ADCW;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0128 }
;PCODE: $000001FC VOL: 0
;
;
