
AVRASM ver. 2.1.30  C:\Users\tobuu\OneDrive\Desktop\Tohoangbuu-N21DCVT009\To_Hoang_Buu-N21DCVT009\Codevision\List\hien_thi_nhiet_do.asm Tue Dec 26 21:58:46 2023

C:\Users\tobuu\OneDrive\Desktop\Tohoangbuu-N21DCVT009\To_Hoang_Buu-N21DCVT009\Codevision\List\hien_thi_nhiet_do.asm(1059): warning: Register r4 already defined by the .DEF directive
C:\Users\tobuu\OneDrive\Desktop\Tohoangbuu-N21DCVT009\To_Hoang_Buu-N21DCVT009\Codevision\List\hien_thi_nhiet_do.asm(1060): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R4
                 	.DEF _index=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00cb 	JMP  __RESET
000002 940c 0188 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 01c3 	JMP  _timer1_compa_isr
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 01d0 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x30:
000033 0000      	.DB  0x0,0x0
                 _0x0:
000034 0a0d
000035 6300
000036 756f
000037 746e      	.DB  0xD,0xA,0x0,0x63,0x6F,0x75,0x6E,0x74
000038 003a
000039 656c
00003a 3164
00003b 6f20      	.DB  0x3A,0x0,0x6C,0x65,0x64,0x31,0x20,0x6F
00003c 006e
00003d 656c
00003e 3164
00003f 6f20      	.DB  0x6E,0x0,0x6C,0x65,0x64,0x31,0x20,0x6F
000040 6666
000041 6c00
000042 6465
000043 2032      	.DB  0x66,0x66,0x0,0x6C,0x65,0x64,0x32,0x20
000044 6e6f
000045 6c00
000046 6465
000047 2032      	.DB  0x6F,0x6E,0x0,0x6C,0x65,0x64,0x32,0x20
000048 666f
000049 0066
00004a 656c
00004b 3364      	.DB  0x6F,0x66,0x66,0x0,0x6C,0x65,0x64,0x33
00004c 6f20
00004d 006e
00004e 656c
00004f 3364      	.DB  0x20,0x6F,0x6E,0x0,0x6C,0x65,0x64,0x33
000050 6f20
000051 6666
000052 6c00
000053 6465      	.DB  0x20,0x6F,0x66,0x66,0x0,0x6C,0x65,0x64
000054 2034
000055 6e6f
000056 6c00
000057 6465      	.DB  0x34,0x20,0x6F,0x6E,0x0,0x6C,0x65,0x64
000058 2034
000059 666f
00005a 0066
00005b 656c      	.DB  0x34,0x20,0x6F,0x66,0x66,0x0,0x6C,0x65
00005c 3564
00005d 6f20
00005e 006e
00005f 656c      	.DB  0x64,0x35,0x20,0x6F,0x6E,0x0,0x6C,0x65
000060 3564
000061 6f20
000062 6666
000063 6c00      	.DB  0x64,0x35,0x20,0x6F,0x66,0x66,0x0,0x6C
000064 6465
000065 2036
000066 6e6f
000067 6c00      	.DB  0x65,0x64,0x36,0x20,0x6F,0x6E,0x0,0x6C
000068 6465
000069 2036
00006a 666f
00006b 0066      	.DB  0x65,0x64,0x36,0x20,0x6F,0x66,0x66,0x0
00006c 656c
00006d 3764
00006e 6f20
00006f 006e      	.DB  0x6C,0x65,0x64,0x37,0x20,0x6F,0x6E,0x0
000070 656c
000071 3764
000072 6f20
000073 6666      	.DB  0x6C,0x65,0x64,0x37,0x20,0x6F,0x66,0x66
000074 6c00
000075 6465
000076 2038
000077 6e6f      	.DB  0x0,0x6C,0x65,0x64,0x38,0x20,0x6F,0x6E
000078 6c00
000079 6465
00007a 2038
00007b 666f      	.DB  0x0,0x6C,0x65,0x64,0x38,0x20,0x6F,0x66
00007c 0066
00007d 6573
00007e 2074
00007f 6974      	.DB  0x66,0x0,0x73,0x65,0x74,0x20,0x74,0x69
000080 656d
C:\Users\tobuu\OneDrive\Desktop\Tohoangbuu-N21DCVT009\To_Hoang_Buu-N21DCVT009\Codevision\List\hien_thi_nhiet_do.asm(1119): warning: .cseg .db misalignment - padding zero byte
000081 0000      	.DB  0x6D,0x65,0x0
                 _0x2040060:
C:\Users\tobuu\OneDrive\Desktop\Tohoangbuu-N21DCVT009\To_Hoang_Buu-N21DCVT009\Codevision\List\hien_thi_nhiet_do.asm(1121): warning: .cseg .db misalignment - padding zero byte
000082 0001      	.DB  0x1
                 _0x2040000:
000083 4e2d
000084 4e41
000085 4900
000086 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\tobuu\OneDrive\Desktop\Tohoangbuu-N21DCVT009\To_Hoang_Buu-N21DCVT009\Codevision\List\hien_thi_nhiet_do.asm(1124): warning: .cseg .db misalignment - padding zero byte
000087 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000088 0003      	.DW  0x03
000089 0160      	.DW  _0x6
00008a 0068      	.DW  _0x0*2
                 
00008b 0007      	.DW  0x07
00008c 0163      	.DW  _0xE
00008d 006b      	.DW  _0x0*2+3
                 
00008e 0003      	.DW  0x03
00008f 016a      	.DW  _0xE+7
000090 0068      	.DW  _0x0*2
                 
000091 0008      	.DW  0x08
000092 016d      	.DW  _0x15
000093 0072      	.DW  _0x0*2+10
                 
000094 0009      	.DW  0x09
000095 0175      	.DW  _0x15+8
000096 007a      	.DW  _0x0*2+18
                 
000097 0008      	.DW  0x08
000098 017e      	.DW  _0x15+17
000099 0083      	.DW  _0x0*2+27
                 
00009a 0009      	.DW  0x09
00009b 0186      	.DW  _0x15+25
00009c 008b      	.DW  _0x0*2+35
                 
00009d 0008      	.DW  0x08
00009e 018f      	.DW  _0x15+34
00009f 0094      	.DW  _0x0*2+44
                 
0000a0 0009      	.DW  0x09
0000a1 0197      	.DW  _0x15+42
0000a2 009c      	.DW  _0x0*2+52
                 
0000a3 0008      	.DW  0x08
0000a4 01a0      	.DW  _0x15+51
0000a5 00a5      	.DW  _0x0*2+61
                 
0000a6 0009      	.DW  0x09
0000a7 01a8      	.DW  _0x15+59
0000a8 00ad      	.DW  _0x0*2+69
                 
0000a9 0008      	.DW  0x08
0000aa 01b1      	.DW  _0x15+68
0000ab 00b6      	.DW  _0x0*2+78
                 
0000ac 0009      	.DW  0x09
0000ad 01b9      	.DW  _0x15+76
0000ae 00be      	.DW  _0x0*2+86
                 
0000af 0008      	.DW  0x08
0000b0 01c2      	.DW  _0x15+85
0000b1 00c7      	.DW  _0x0*2+95
                 
0000b2 0009      	.DW  0x09
0000b3 01ca      	.DW  _0x15+93
0000b4 00cf      	.DW  _0x0*2+103
                 
0000b5 0008      	.DW  0x08
0000b6 01d3      	.DW  _0x15+102
0000b7 00d8      	.DW  _0x0*2+112
                 
0000b8 0009      	.DW  0x09
0000b9 01db      	.DW  _0x15+110
0000ba 00e0      	.DW  _0x0*2+120
                 
0000bb 0008      	.DW  0x08
0000bc 01e4      	.DW  _0x15+119
0000bd 00e9      	.DW  _0x0*2+129
                 
0000be 0009      	.DW  0x09
0000bf 01ec      	.DW  _0x15+127
0000c0 00f1      	.DW  _0x0*2+137
                 
0000c1 0009      	.DW  0x09
0000c2 01f5      	.DW  _0x15+136
0000c3 00fa      	.DW  _0x0*2+146
                 
0000c4 0002      	.DW  0x02
0000c5 0006      	.DW  0x06
0000c6 0066      	.DW  _0x30*2
                 
0000c7 0001      	.DW  0x01
0000c8 0228      	.DW  __seed_G102
0000c9 0104      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
0000ca 0000      	.DW  0
                 
                 __RESET:
0000cb 94f8      	CLI
0000cc 27ee      	CLR  R30
0000cd bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000ce e0f1      	LDI  R31,1
0000cf bffb      	OUT  GICR,R31
0000d0 bfeb      	OUT  GICR,R30
0000d1 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
0000d2 e1f8      	LDI  R31,0x18
0000d3 bdf1      	OUT  WDTCR,R31
0000d4 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
0000d5 e08d      	LDI  R24,(14-2)+1
0000d6 e0a2      	LDI  R26,2
0000d7 27bb      	CLR  R27
                 __CLEAR_REG:
0000d8 93ed      	ST   X+,R30
0000d9 958a      	DEC  R24
0000da f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000db e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000dc e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000dd e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000de 93ed      	ST   X+,R30
0000df 9701      	SBIW R24,1
0000e0 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000e1 e1e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000e2 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000e3 9185      	LPM  R24,Z+
0000e4 9195      	LPM  R25,Z+
0000e5 9700      	SBIW R24,0
0000e6 f061      	BREQ __GLOBAL_INI_END
0000e7 91a5      	LPM  R26,Z+
0000e8 91b5      	LPM  R27,Z+
0000e9 9005      	LPM  R0,Z+
0000ea 9015      	LPM  R1,Z+
0000eb 01bf      	MOVW R22,R30
0000ec 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ed 9005      	LPM  R0,Z+
0000ee 920d      	ST   X+,R0
0000ef 9701      	SBIW R24,1
0000f0 f7e1      	BRNE __GLOBAL_INI_LOOP
0000f1 01fb      	MOVW R30,R22
0000f2 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000f3 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000f4 bfed      	OUT  SPL,R30
0000f5 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000f6 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000f7 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000f8 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000f9 940c 00fb 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <stdio.h>
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;#include <math.h>
                 ;
                 ;#define MAX_STRING_LENGTH 20
                 ;#define ADC_VREF_TYPE 0x00
                 ;
                 ;volatile int ticks = 0;
                 ;unsigned long tram, chuc, dvi;
                 ;unsigned long adc_out;
                 ;unsigned long nhiet_do;
                 ;unsigned int count;
                 ;char receivedData[MAX_STRING_LENGTH];
                 ;int index = 0;
                 ;
                 ;void uart_char_send(unsigned char chr);  //chuong trinh con phat mot ky tu
                 ;void uart_string_send(unsigned char *txt);  //chuong trinh con phat mot chuoi ky tu
                 ;void check_string(char *receivedData);
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void);  // External Interrupt 0 service routine
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void);
                 ;interrupt [USART_RXC] void usart_rx_isr(void);
                 ;
                 ;unsigned int read_adc(unsigned char adc_input);  // Read the AD conversion result
                 ;
                 ;
                 ;void main(void)
                 ; 0000 001F {
                 
                 	.CSEG
                 _main:
                 ; 0000 0020 PORTA=0x00;
0000fb e0e0      	LDI  R30,LOW(0)
0000fc bbeb      	OUT  0x1B,R30
                 ; 0000 0021 DDRA=0x00;
0000fd bbea      	OUT  0x1A,R30
                 ; 0000 0022 
                 ; 0000 0023 // Port B initialization
                 ; 0000 0024 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
                 ; 0000 0025 // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=T
                 ; 0000 0026 PORTB=0x00;
0000fe bbe8      	OUT  0x18,R30
                 ; 0000 0027 DDRB=0x02;
0000ff e0e2      	LDI  R30,LOW(2)
000100 bbe7      	OUT  0x17,R30
                 ; 0000 0028 
                 ; 0000 0029 // Port C initialization
                 ; 0000 002A // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 002B // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 002C PORTC=0x00;
000101 e0e0      	LDI  R30,LOW(0)
000102 bbe5      	OUT  0x15,R30
                 ; 0000 002D DDRC=0xFF;
000103 efef      	LDI  R30,LOW(255)
000104 bbe4      	OUT  0x14,R30
                 ; 0000 002E 
                 ; 0000 002F // Port D initialization
                 ; 0000 0030 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
                 ; 0000 0031 // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=0
                 ; 0000 0032 PORTD=0x00;
000105 e0e0      	LDI  R30,LOW(0)
000106 bbe2      	OUT  0x12,R30
                 ; 0000 0033 DDRD=0x02;
000107 e0e2      	LDI  R30,LOW(2)
000108 bbe1      	OUT  0x11,R30
                 ; 0000 0034 
                 ; 0000 0035 // Timer/Counter 1 initialization
                 ; 0000 0036 // Clock source: System Clock
                 ; 0000 0037 // Clock value: 8000.000 kHz
                 ; 0000 0038 // Mode: Normal top=0xFFFF
                 ; 0000 0039 // OC1A output: Discon.
                 ; 0000 003A // OC1B output: Discon.
                 ; 0000 003B // Noise Canceler: Off
                 ; 0000 003C // Input Capture on Falling Edge
                 ; 0000 003D // Timer1 Overflow Interrupt: Off
                 ; 0000 003E // Input Capture Interrupt: Off
                 ; 0000 003F // Compare A Match Interrupt: On
                 ; 0000 0040 // Compare B Match Interrupt: Off
                 ; 0000 0041 TCCR1A=0x00;
000109 e0e0      	LDI  R30,LOW(0)
00010a bdef      	OUT  0x2F,R30
                 ; 0000 0042 TCCR1B=0x0C;
00010b e0ec      	LDI  R30,LOW(12)
00010c bdee      	OUT  0x2E,R30
                 ; 0000 0043 TCNT1H=0x00;
00010d e0e0      	LDI  R30,LOW(0)
00010e bded      	OUT  0x2D,R30
                 ; 0000 0044 TCNT1L=0x00;
00010f bdec      	OUT  0x2C,R30
                 ; 0000 0045 OCR1BH=0x00;
000110 bde9      	OUT  0x29,R30
                 ; 0000 0046 OCR1BL=0x00;
000111 bde8      	OUT  0x28,R30
                 ; 0000 0047 
                 ; 0000 0048 
                 ; 0000 0049 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 004A TIMSK=0x10;
000112 e1e0      	LDI  R30,LOW(16)
000113 bfe9      	OUT  0x39,R30
                 ; 0000 004B 
                 ; 0000 004C // External Interrupt(s) initialization
                 ; 0000 004D // INT0: On
                 ; 0000 004E // INT0 Mode: Rising Edge
                 ; 0000 004F // INT1: Off
                 ; 0000 0050 // INT2: Off
                 ; 0000 0051 GICR|=0x40;
000114 b7eb      	IN   R30,0x3B
000115 64e0      	ORI  R30,0x40
000116 bfeb      	OUT  0x3B,R30
                 ; 0000 0052 MCUCR=0x03;
000117 e0e3      	LDI  R30,LOW(3)
000118 bfe5      	OUT  0x35,R30
                 ; 0000 0053 MCUCSR=0x00;
000119 e0e0      	LDI  R30,LOW(0)
00011a bfe4      	OUT  0x34,R30
                 ; 0000 0054 GIFR=0x40;
00011b e4e0      	LDI  R30,LOW(64)
00011c bfea      	OUT  0x3A,R30
                 ; 0000 0055 
                 ; 0000 0056 // USART initialization
                 ; 0000 0057 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0058 // USART Receiver: On
                 ; 0000 0059 // USART Transmitter: On
                 ; 0000 005A // USART Mode: Asynchronous
                 ; 0000 005B // USART Baud Rate: 9600
                 ; 0000 005C UCSRA=0x00;
00011d e0e0      	LDI  R30,LOW(0)
00011e b9eb      	OUT  0xB,R30
                 ; 0000 005D UCSRB=0x98;
00011f e9e8      	LDI  R30,LOW(152)
000120 b9ea      	OUT  0xA,R30
                 ; 0000 005E UCSRC=0x86;
000121 e8e6      	LDI  R30,LOW(134)
000122 bde0      	OUT  0x20,R30
                 ; 0000 005F UBRRH=0x00;
000123 e0e0      	LDI  R30,LOW(0)
000124 bde0      	OUT  0x20,R30
                 ; 0000 0060 UBRRL=0x33;
000125 e3e3      	LDI  R30,LOW(51)
000126 b9e9      	OUT  0x9,R30
                 ; 0000 0061 
                 ; 0000 0062 // ADC initialization
                 ; 0000 0063 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0064 // ADC Voltage Reference: AREF pin
                 ; 0000 0065 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0066 ADMUX=ADC_VREF_TYPE & 0xff;
000127 e0e0      	LDI  R30,LOW(0)
000128 b9e7      	OUT  0x7,R30
                 ; 0000 0067 ADCSRA=0x83;
000129 e8e3      	LDI  R30,LOW(131)
00012a b9e6      	OUT  0x6,R30
                 ; 0000 0068 
                 ; 0000 0069 // Global enable interrupts
                 ; 0000 006A #asm("sei")
00012b 9478      	sei
                 ; 0000 006B 
                 ; 0000 006C 
                 ; 0000 006D while (1)
                 _0x3:
                 ; 0000 006E     {
                 ; 0000 006F 
                 ; 0000 0070         adc_out = read_adc(0);
00012c e0e0      	LDI  R30,LOW(0)
00012d 93ea      	ST   -Y,R30
00012e d1b9      	RCALL _read_adc
00012f 2766      	CLR  R22
000130 2777      	CLR  R23
000131 93e0 020c 	STS  _adc_out,R30
000133 93f0 020d 	STS  _adc_out+1,R31
000135 9360 020e 	STS  _adc_out+2,R22
000137 9370 020f 	STS  _adc_out+3,R23
                 ; 0000 0071         nhiet_do = adc_out*500/1023;
                +
000139 efa4     +LDI R26 , LOW ( 0x1F4 )
00013a e0b1     +LDI R27 , HIGH ( 0x1F4 )
00013b e080     +LDI R24 , BYTE3 ( 0x1F4 )
00013c e090     +LDI R25 , BYTE4 ( 0x1F4 )
                 	__GETD2N 0x1F4
00013d 940e 052e 	CALL __MULD12U
00013f 01df      	MOVW R26,R30
000140 01cb      	MOVW R24,R22
                +
000141 efef     +LDI R30 , LOW ( 0x3FF )
000142 e0f3     +LDI R31 , HIGH ( 0x3FF )
000143 e060     +LDI R22 , BYTE3 ( 0x3FF )
000144 e070     +LDI R23 , BYTE4 ( 0x3FF )
                 	__GETD1N 0x3FF
000145 940e 0566 	CALL __DIVD21U
000147 93e0 0210 	STS  _nhiet_do,R30
000149 93f0 0211 	STS  _nhiet_do+1,R31
00014b 9360 0212 	STS  _nhiet_do+2,R22
00014d 9370 0213 	STS  _nhiet_do+3,R23
                 ; 0000 0072         chuc = nhiet_do/10;
00014f 940e 03b5 	CALL SUBOPT_0x0
000151 940e 0566 	CALL __DIVD21U
000153 940e 03c2 	CALL SUBOPT_0x1
                 ; 0000 0073         dvi = (nhiet_do%10);
000155 940e 03b5 	CALL SUBOPT_0x0
000157 940e 0593 	CALL __MODD21U
000159 940e 03cb 	CALL SUBOPT_0x2
                 ; 0000 0074 
                 ; 0000 0075 
                 ; 0000 0076         //uart_string_send("nhiet do la:");
                 ; 0000 0077         uart_char_send(chuc + 0x30);
00015b 940e 03d4 	CALL SUBOPT_0x3
                 ; 0000 0078         uart_char_send(dvi + 0x30);
                 ; 0000 0079         uart_string_send("\r\n");
                +
00015d e6e0     +LDI R30 , LOW ( _0x6 + ( 0 ) )
00015e e0f1     +LDI R31 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW1MN _0x6,0
00015f 940e 03e0 	CALL SUBOPT_0x4
                 ; 0000 007A 
                 ; 0000 007B         delay_ms(200);
000161 ece8      	LDI  R30,LOW(200)
000162 e0f0      	LDI  R31,HIGH(200)
000163 93fa      	ST   -Y,R31
000164 93ea      	ST   -Y,R30
000165 940e 040a 	CALL _delay_ms
                 ; 0000 007C 
                 ; 0000 007D     }
000167 cfc4      	RJMP _0x3
                 ; 0000 007E }
                 _0x7:
000168 cfff      	RJMP _0x7
                 
                 	.DSEG
                 _0x6:
000160           	.BYTE 0x3
                 ;
                 ;
                 ;
                 ;
                 ;void uart_char_send(unsigned char chr)
                 ; 0000 0084 {
                 
                 	.CSEG
                 _uart_char_send:
                 ; 0000 0085     while (!(UCSRA & (1<<UDRE)))   //cho den khi bit UDRE = 1
                 ;	chr -> Y+0
                 _0x8:
000169 9b5d      	SBIS 0xB,5
                 ; 0000 0086     {
                 ; 0000 0087 
                 ; 0000 0088     };
00016a cffe      	RJMP _0x8
                 ; 0000 0089     UDR = chr;
00016b 81e8      	LD   R30,Y
00016c b9ec      	OUT  0xC,R30
                 ; 0000 008A }
00016d c185      	RJMP _0x20A0002
                 ;
                 ;
                 ;void uart_string_send(unsigned char *txt)
                 ; 0000 008E {
                 _uart_string_send:
                 ; 0000 008F     unsigned char n, i;
                 ; 0000 0090     n = strlen(txt); //dem so ky tu
00016e 931a      	ST   -Y,R17
00016f 930a      	ST   -Y,R16
                 ;	*txt -> Y+2
                 ;	n -> R17
                 ;	i -> R16
000170 81ea      	LDD  R30,Y+2
000171 81fb      	LDD  R31,Y+2+1
000172 93fa      	ST   -Y,R31
000173 93ea      	ST   -Y,R30
000174 940e 02f5 	CALL _strlen
000176 2f1e      	MOV  R17,R30
                 ; 0000 0091         for (i = 0; i < n; i++)
000177 e000      	LDI  R16,LOW(0)
                 _0xC:
000178 1701      	CP   R16,R17
000179 f450      	BRSH _0xD
                 ; 0000 0092         {
                 ; 0000 0093             uart_char_send(txt[i]); //phat du lieu
00017a 81aa      	LDD  R26,Y+2
00017b 81bb      	LDD  R27,Y+2+1
00017c 27ee      	CLR  R30
00017d 0fa0      	ADD  R26,R16
00017e 1fbe      	ADC  R27,R30
00017f 91ec      	LD   R30,X
000180 93ea      	ST   -Y,R30
000181 dfe7      	RCALL _uart_char_send
                 ; 0000 0094         }
000182 5f0f      	SUBI R16,-1
000183 cff4      	RJMP _0xC
                 _0xD:
                 ; 0000 0095 }
000184 8119      	LDD  R17,Y+1
000185 8108      	LDD  R16,Y+0
000186 940c 03a1 	JMP  _0x20A0001
                 ;
                 ;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 009A {
                 _ext_int0_isr:
000188 940e 03e4 	CALL SUBOPT_0x5
                 ; 0000 009B     count++;
00018a 01f2      	MOVW R30,R4
00018b 9631      	ADIW R30,1
00018c 012f      	MOVW R4,R30
                 ; 0000 009C 
                 ; 0000 009D     tram = count/ 100;
00018d 01d2      	MOVW R26,R4
00018e e6e4      	LDI  R30,LOW(100)
00018f e0f0      	LDI  R31,HIGH(100)
000190 940e 0553 	CALL __DIVW21U
000192 2766      	CLR  R22
000193 2777      	CLR  R23
000194 93e0 0200 	STS  _tram,R30
000196 93f0 0201 	STS  _tram+1,R31
000198 9360 0202 	STS  _tram+2,R22
00019a 9370 0203 	STS  _tram+3,R23
                 ; 0000 009E     chuc = (count % 100)/ 10;
00019c 01d2      	MOVW R26,R4
00019d e6e4      	LDI  R30,LOW(100)
00019e e0f0      	LDI  R31,HIGH(100)
00019f 940e 0590 	CALL __MODW21U
0001a1 01df      	MOVW R26,R30
0001a2 e0ea      	LDI  R30,LOW(10)
0001a3 e0f0      	LDI  R31,HIGH(10)
0001a4 940e 0553 	CALL __DIVW21U
0001a6 2766      	CLR  R22
0001a7 2777      	CLR  R23
0001a8 940e 03c2 	CALL SUBOPT_0x1
                 ; 0000 009F     dvi = count % 10;
0001aa 01d2      	MOVW R26,R4
0001ab e0ea      	LDI  R30,LOW(10)
0001ac e0f0      	LDI  R31,HIGH(10)
0001ad 940e 0590 	CALL __MODW21U
0001af 2766      	CLR  R22
0001b0 2777      	CLR  R23
0001b1 940e 03cb 	CALL SUBOPT_0x2
                 ; 0000 00A0 
                 ; 0000 00A1 
                 ; 0000 00A2     uart_string_send("count:");
                +
0001b3 e6e3     +LDI R30 , LOW ( _0xE + ( 0 ) )
0001b4 e0f1     +LDI R31 , HIGH ( _0xE + ( 0 ) )
                 	__POINTW1MN _0xE,0
0001b5 940e 03e0 	CALL SUBOPT_0x4
                 ; 0000 00A3     uart_char_send(tram + 0x30);
0001b7 91e0 0200 	LDS  R30,_tram
0001b9 5de0      	SUBI R30,-LOW(48)
0001ba 93ea      	ST   -Y,R30
0001bb dfad      	RCALL _uart_char_send
                 ; 0000 00A4     uart_char_send(chuc + 0x30);
0001bc 940e 03d4 	CALL SUBOPT_0x3
                 ; 0000 00A5     uart_char_send(dvi + 0x30);
                 ; 0000 00A6 
                 ; 0000 00A7     uart_string_send("\r\n");
                +
0001be e6ea     +LDI R30 , LOW ( _0xE + ( 7 ) )
0001bf e0f1     +LDI R31 , HIGH ( _0xE + ( 7 ) )
                 	__POINTW1MN _0xE,7
0001c0 940e 03e0 	CALL SUBOPT_0x4
                 ; 0000 00A8 }
0001c2 c032      	RJMP _0x2F
                 
                 	.DSEG
                 _0xE:
000163           	.BYTE 0xA
                 ;
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 00AC {
                 
                 	.CSEG
                 _timer1_compa_isr:
0001c3 93aa      	ST   -Y,R26
0001c4 93ea      	ST   -Y,R30
0001c5 b7ef      	IN   R30,SREG
0001c6 93ea      	ST   -Y,R30
                 ; 0000 00AD     PORTB ^= (1 << PORTB1);
0001c7 b3e8      	IN   R30,0x18
0001c8 e0a2      	LDI  R26,LOW(2)
0001c9 27ea      	EOR  R30,R26
0001ca bbe8      	OUT  0x18,R30
                 ; 0000 00AE }
0001cb 91e9      	LD   R30,Y+
0001cc bfef      	OUT  SREG,R30
0001cd 91e9      	LD   R30,Y+
0001ce 91a9      	LD   R26,Y+
0001cf 9518      	RETI
                 ;
                 ;
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 00B2 {
                 _usart_rx_isr:
0001d0 940e 03e4 	CALL SUBOPT_0x5
                 ; 0000 00B3     char data = UDR;
                 ; 0000 00B4     uart_char_send(data);
0001d2 931a      	ST   -Y,R17
                 ;	data -> R17
0001d3 b11c      	IN   R17,12
0001d4 931a      	ST   -Y,R17
0001d5 df93      	RCALL _uart_char_send
                 ; 0000 00B5 
                 ; 0000 00B6     if (data == '\n' || data == '\r')
0001d6 301a      	CPI  R17,10
0001d7 f011      	BREQ _0x10
0001d8 301d      	CPI  R17,13
0001d9 f471      	BRNE _0xF
                 _0x10:
                 ; 0000 00B7     {
                 ; 0000 00B8         receivedData[index] = '\0';
0001da e1a4      	LDI  R26,LOW(_receivedData)
0001db e0b2      	LDI  R27,HIGH(_receivedData)
0001dc 0da6      	ADD  R26,R6
0001dd 1db7      	ADC  R27,R7
0001de e0e0      	LDI  R30,LOW(0)
0001df 93ec      	ST   X,R30
                 ; 0000 00B9         check_string(receivedData);
0001e0 e1e4      	LDI  R30,LOW(_receivedData)
0001e1 e0f2      	LDI  R31,HIGH(_receivedData)
0001e2 93fa      	ST   -Y,R31
0001e3 93ea      	ST   -Y,R30
0001e4 d01e      	RCALL _check_string
                 ; 0000 00BA 
                 ; 0000 00BB         index = 0;
0001e5 2466      	CLR  R6
0001e6 2477      	CLR  R7
                 ; 0000 00BC     }
                 ; 0000 00BD     else
0001e7 c00c      	RJMP _0x12
                 _0xF:
                 ; 0000 00BE     {
                 ; 0000 00BF         if (index < MAX_STRING_LENGTH - 1)
0001e8 e1e3      	LDI  R30,LOW(19)
0001e9 e0f0      	LDI  R31,HIGH(19)
0001ea 166e      	CP   R6,R30
0001eb 067f      	CPC  R7,R31
0001ec f43c      	BRGE _0x13
                 ; 0000 00C0         {
                 ; 0000 00C1             receivedData[index++] = data;
0001ed 01f3      	MOVW R30,R6
0001ee 9631      	ADIW R30,1
0001ef 013f      	MOVW R6,R30
0001f0 9731      	SBIW R30,1
0001f1 5eec      	SUBI R30,LOW(-_receivedData)
0001f2 4ffd      	SBCI R31,HIGH(-_receivedData)
0001f3 8310      	ST   Z,R17
                 ; 0000 00C2         }
                 ; 0000 00C3     }
                 _0x13:
                 _0x12:
                 ; 0000 00C4 }
0001f4 9119      	LD   R17,Y+
                 _0x2F:
0001f5 91e9      	LD   R30,Y+
0001f6 bfef      	OUT  SREG,R30
0001f7 91f9      	LD   R31,Y+
0001f8 91e9      	LD   R30,Y+
0001f9 91b9      	LD   R27,Y+
0001fa 91a9      	LD   R26,Y+
0001fb 9199      	LD   R25,Y+
0001fc 9189      	LD   R24,Y+
0001fd 9179      	LD   R23,Y+
0001fe 9169      	LD   R22,Y+
0001ff 90f9      	LD   R15,Y+
000200 9019      	LD   R1,Y+
000201 9009      	LD   R0,Y+
000202 9518      	RETI
                 ;
                 ;
                 ;
                 ;void check_string(char *receivedData)
                 ; 0000 00C9 {
                 _check_string:
                 ; 0000 00CA     if (strstr(receivedData, "led1 on") != NULL)
                 ;	*receivedData -> Y+0
000203 940e 03f2 	CALL SUBOPT_0x6
                +
000205 e6ed     +LDI R30 , LOW ( _0x15 + ( 0 ) )
000206 e0f1     +LDI R31 , HIGH ( _0x15 + ( 0 ) )
                 	__POINTW1MN _0x15,0
000207 940e 03f7 	CALL SUBOPT_0x7
000209 f009      	BREQ _0x14
                 ; 0000 00CB     {
                 ; 0000 00CC         PORTC |= 0b00000001;
00020a 9aa8      	SBI  0x15,0
                 ; 0000 00CD     }
                 ; 0000 00CE     if (strstr(receivedData, "led1 off") != NULL)
                 _0x14:
00020b 940e 03f2 	CALL SUBOPT_0x6
                +
00020d e7e5     +LDI R30 , LOW ( _0x15 + ( 8 ) )
00020e e0f1     +LDI R31 , HIGH ( _0x15 + ( 8 ) )
                 	__POINTW1MN _0x15,8
00020f 940e 03f7 	CALL SUBOPT_0x7
000211 f009      	BREQ _0x16
                 ; 0000 00CF     {
                 ; 0000 00D0         PORTC &= ~0b00000001;
000212 98a8      	CBI  0x15,0
                 ; 0000 00D1     }
                 ; 0000 00D2     if (strstr(receivedData, "led2 on") != NULL)
                 _0x16:
000213 940e 03f2 	CALL SUBOPT_0x6
                +
000215 e7ee     +LDI R30 , LOW ( _0x15 + ( 17 ) )
000216 e0f1     +LDI R31 , HIGH ( _0x15 + ( 17 ) )
                 	__POINTW1MN _0x15,17
000217 940e 03f7 	CALL SUBOPT_0x7
000219 f009      	BREQ _0x17
                 ; 0000 00D3     {
                 ; 0000 00D4         PORTC |= 0b00000010;
00021a 9aa9      	SBI  0x15,1
                 ; 0000 00D5     }
                 ; 0000 00D6     if (strstr(receivedData, "led2 off") != NULL)
                 _0x17:
00021b 940e 03f2 	CALL SUBOPT_0x6
                +
00021d e8e6     +LDI R30 , LOW ( _0x15 + ( 25 ) )
00021e e0f1     +LDI R31 , HIGH ( _0x15 + ( 25 ) )
                 	__POINTW1MN _0x15,25
00021f 940e 03f7 	CALL SUBOPT_0x7
000221 f009      	BREQ _0x18
                 ; 0000 00D7     {
                 ; 0000 00D8         PORTC &= ~0b00000010;
000222 98a9      	CBI  0x15,1
                 ; 0000 00D9     }
                 ; 0000 00DA     if (strstr(receivedData, "led3 on") != NULL)
                 _0x18:
000223 940e 03f2 	CALL SUBOPT_0x6
                +
000225 e8ef     +LDI R30 , LOW ( _0x15 + ( 34 ) )
000226 e0f1     +LDI R31 , HIGH ( _0x15 + ( 34 ) )
                 	__POINTW1MN _0x15,34
000227 940e 03f7 	CALL SUBOPT_0x7
000229 f009      	BREQ _0x19
                 ; 0000 00DB     {
                 ; 0000 00DC         PORTC |= 0b00000100;
00022a 9aaa      	SBI  0x15,2
                 ; 0000 00DD     }
                 ; 0000 00DE     if (strstr(receivedData, "led3 off") != NULL)
                 _0x19:
00022b 940e 03f2 	CALL SUBOPT_0x6
                +
00022d e9e7     +LDI R30 , LOW ( _0x15 + ( 42 ) )
00022e e0f1     +LDI R31 , HIGH ( _0x15 + ( 42 ) )
                 	__POINTW1MN _0x15,42
00022f 940e 03f7 	CALL SUBOPT_0x7
000231 f009      	BREQ _0x1A
                 ; 0000 00DF     {
                 ; 0000 00E0         PORTC &= ~0b00000100;
000232 98aa      	CBI  0x15,2
                 ; 0000 00E1     }
                 ; 0000 00E2     if (strstr(receivedData, "led4 on") != NULL)
                 _0x1A:
000233 940e 03f2 	CALL SUBOPT_0x6
                +
000235 eae0     +LDI R30 , LOW ( _0x15 + ( 51 ) )
000236 e0f1     +LDI R31 , HIGH ( _0x15 + ( 51 ) )
                 	__POINTW1MN _0x15,51
000237 940e 03f7 	CALL SUBOPT_0x7
000239 f009      	BREQ _0x1B
                 ; 0000 00E3     {
                 ; 0000 00E4         PORTC |= 0b00001000;
00023a 9aab      	SBI  0x15,3
                 ; 0000 00E5     }
                 ; 0000 00E6     if (strstr(receivedData, "led4 off") != NULL)
                 _0x1B:
00023b 940e 03f2 	CALL SUBOPT_0x6
                +
00023d eae8     +LDI R30 , LOW ( _0x15 + ( 59 ) )
00023e e0f1     +LDI R31 , HIGH ( _0x15 + ( 59 ) )
                 	__POINTW1MN _0x15,59
00023f 940e 03f7 	CALL SUBOPT_0x7
000241 f009      	BREQ _0x1C
                 ; 0000 00E7     {
                 ; 0000 00E8         PORTC &= ~0b00001000;
000242 98ab      	CBI  0x15,3
                 ; 0000 00E9     }
                 ; 0000 00EA     if (strstr(receivedData, "led5 on") != NULL)
                 _0x1C:
000243 940e 03f2 	CALL SUBOPT_0x6
                +
000245 ebe1     +LDI R30 , LOW ( _0x15 + ( 68 ) )
000246 e0f1     +LDI R31 , HIGH ( _0x15 + ( 68 ) )
                 	__POINTW1MN _0x15,68
000247 940e 03f7 	CALL SUBOPT_0x7
000249 f009      	BREQ _0x1D
                 ; 0000 00EB     {
                 ; 0000 00EC         PORTC |= 0b00010000;
00024a 9aac      	SBI  0x15,4
                 ; 0000 00ED     }
                 ; 0000 00EE     if (strstr(receivedData, "led5 off") != NULL)
                 _0x1D:
00024b 940e 03f2 	CALL SUBOPT_0x6
                +
00024d ebe9     +LDI R30 , LOW ( _0x15 + ( 76 ) )
00024e e0f1     +LDI R31 , HIGH ( _0x15 + ( 76 ) )
                 	__POINTW1MN _0x15,76
00024f 940e 03f7 	CALL SUBOPT_0x7
000251 f009      	BREQ _0x1E
                 ; 0000 00EF     {
                 ; 0000 00F0         PORTC &= ~0b00010000;
000252 98ac      	CBI  0x15,4
                 ; 0000 00F1     }
                 ; 0000 00F2     if (strstr(receivedData, "led6 on") != NULL)
                 _0x1E:
000253 940e 03f2 	CALL SUBOPT_0x6
                +
000255 ece2     +LDI R30 , LOW ( _0x15 + ( 85 ) )
000256 e0f1     +LDI R31 , HIGH ( _0x15 + ( 85 ) )
                 	__POINTW1MN _0x15,85
000257 940e 03f7 	CALL SUBOPT_0x7
000259 f009      	BREQ _0x1F
                 ; 0000 00F3     {
                 ; 0000 00F4         PORTC |= 0b00100000;
00025a 9aad      	SBI  0x15,5
                 ; 0000 00F5     }
                 ; 0000 00F6     if (strstr(receivedData, "led6 off") != NULL)
                 _0x1F:
00025b 940e 03f2 	CALL SUBOPT_0x6
                +
00025d ecea     +LDI R30 , LOW ( _0x15 + ( 93 ) )
00025e e0f1     +LDI R31 , HIGH ( _0x15 + ( 93 ) )
                 	__POINTW1MN _0x15,93
00025f 940e 03f7 	CALL SUBOPT_0x7
000261 f009      	BREQ _0x20
                 ; 0000 00F7     {
                 ; 0000 00F8         PORTC &= ~0b00100000;
000262 98ad      	CBI  0x15,5
                 ; 0000 00F9     }
                 ; 0000 00FA     if (strstr(receivedData, "led7 on") != NULL)
                 _0x20:
000263 940e 03f2 	CALL SUBOPT_0x6
                +
000265 ede3     +LDI R30 , LOW ( _0x15 + ( 102 ) )
000266 e0f1     +LDI R31 , HIGH ( _0x15 + ( 102 ) )
                 	__POINTW1MN _0x15,102
000267 940e 03f7 	CALL SUBOPT_0x7
000269 f009      	BREQ _0x21
                 ; 0000 00FB     {
                 ; 0000 00FC         PORTC |= 0b01000000;
00026a 9aae      	SBI  0x15,6
                 ; 0000 00FD     }
                 ; 0000 00FE     if (strstr(receivedData, "led7 off") != NULL)
                 _0x21:
00026b 940e 03f2 	CALL SUBOPT_0x6
                +
00026d edeb     +LDI R30 , LOW ( _0x15 + ( 110 ) )
00026e e0f1     +LDI R31 , HIGH ( _0x15 + ( 110 ) )
                 	__POINTW1MN _0x15,110
00026f 940e 03f7 	CALL SUBOPT_0x7
000271 f009      	BREQ _0x22
                 ; 0000 00FF     {
                 ; 0000 0100         PORTC &= ~0b01000000;
000272 98ae      	CBI  0x15,6
                 ; 0000 0101     }
                 ; 0000 0102     if (strstr(receivedData, "led8 on") != NULL)
                 _0x22:
000273 940e 03f2 	CALL SUBOPT_0x6
                +
000275 eee4     +LDI R30 , LOW ( _0x15 + ( 119 ) )
000276 e0f1     +LDI R31 , HIGH ( _0x15 + ( 119 ) )
                 	__POINTW1MN _0x15,119
000277 940e 03f7 	CALL SUBOPT_0x7
000279 f009      	BREQ _0x23
                 ; 0000 0103     {
                 ; 0000 0104         PORTC |= 0b10000000;
00027a 9aaf      	SBI  0x15,7
                 ; 0000 0105     }
                 ; 0000 0106     if (strstr(receivedData, "led8 off") != NULL)
                 _0x23:
00027b 940e 03f2 	CALL SUBOPT_0x6
                +
00027d eeec     +LDI R30 , LOW ( _0x15 + ( 127 ) )
00027e e0f1     +LDI R31 , HIGH ( _0x15 + ( 127 ) )
                 	__POINTW1MN _0x15,127
00027f 940e 03f7 	CALL SUBOPT_0x7
000281 f009      	BREQ _0x24
                 ; 0000 0107     {
                 ; 0000 0108         PORTC &= ~0b10000000;
000282 98af      	CBI  0x15,7
                 ; 0000 0109     }
                 ; 0000 010A 
                 ; 0000 010B 
                 ; 0000 010C     if (strncmp(receivedData, "set time", 8) == 0)
                 _0x24:
000283 940e 03f2 	CALL SUBOPT_0x6
                +
000285 efe5     +LDI R30 , LOW ( _0x15 + ( 136 ) )
000286 e0f1     +LDI R31 , HIGH ( _0x15 + ( 136 ) )
                 	__POINTW1MN _0x15,136
000287 93fa      	ST   -Y,R31
000288 93ea      	ST   -Y,R30
000289 e0e8      	LDI  R30,LOW(8)
00028a 93ea      	ST   -Y,R30
00028b 940e 02ff 	CALL _strncmp
00028d 30e0      	CPI  R30,0
00028e f011      	BREQ PC+3
00028f 940c 02e6 	JMP _0x25
                 ; 0000 010D     {
                 ; 0000 010E         ticks = atoi(receivedData + 9);
000291 81e8      	LD   R30,Y
000292 81f9      	LDD  R31,Y+1
000293 9639      	ADIW R30,9
000294 93fa      	ST   -Y,R31
000295 93ea      	ST   -Y,R30
000296 940e 032c 	CALL _atoi
000298 940e 03fd 	CALL SUBOPT_0x8
                 ; 0000 010F 
                 ; 0000 0110         ticks = (ticks < 5) ? ticks : 5;
00029a 91a0 01fe 	LDS  R26,_ticks
00029c 91b0 01ff 	LDS  R27,_ticks+1
00029e 9715      	SBIW R26,5
00029f f41c      	BRGE _0x26
0002a0 940e 0402 	CALL SUBOPT_0x9
0002a2 c002      	RJMP _0x27
                 _0x26:
0002a3 e0e5      	LDI  R30,LOW(5)
0002a4 e0f0      	LDI  R31,HIGH(5)
                 _0x27:
0002a5 940e 03fd 	CALL SUBOPT_0x8
                 ; 0000 0111         ticks = (ticks > 0.5) ? ticks : 0.5;
0002a7 940e 0402 	CALL SUBOPT_0x9
0002a9 940e 0524 	CALL __CWD1
0002ab 940e 0472 	CALL __CDF1
0002ad 01df      	MOVW R26,R30
0002ae 01cb      	MOVW R24,R22
                +
0002af e0e0     +LDI R30 , LOW ( 0x3F000000 )
0002b0 e0f0     +LDI R31 , HIGH ( 0x3F000000 )
0002b1 e060     +LDI R22 , BYTE3 ( 0x3F000000 )
0002b2 e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
0002b3 940e 04f7 	CALL __CMPF12
0002b5 f009      	BREQ PC+2
0002b6 f410      	BRCC PC+3
0002b7 940c 02bc 	JMP  _0x29
0002b9 940e 0402 	CALL SUBOPT_0x9
0002bb c002      	RJMP _0x2A
                 _0x29:
0002bc e0e0      	LDI  R30,LOW(0)
0002bd e0f0      	LDI  R31,HIGH(0)
                 _0x2A:
0002be 940e 03fd 	CALL SUBOPT_0x8
                 ; 0000 0112 
                 ; 0000 0113         // Convert time to ticks
                 ; 0000 0114         ticks = (int)floor(ticks * 8000000 / 256);
0002c0 91a0 01fe 	LDS  R26,_ticks
0002c2 91b0 01ff 	LDS  R27,_ticks+1
0002c4 940e 0529 	CALL __CWD2
                +
0002c6 e0e0     +LDI R30 , LOW ( 0x7A1200 )
0002c7 e1f2     +LDI R31 , HIGH ( 0x7A1200 )
0002c8 e76a     +LDI R22 , BYTE3 ( 0x7A1200 )
0002c9 e070     +LDI R23 , BYTE4 ( 0x7A1200 )
                 	__GETD1N 0x7A1200
0002ca 940e 054e 	CALL __MULD12
0002cc 01df      	MOVW R26,R30
0002cd 01cb      	MOVW R24,R22
                +
0002ce e0e0     +LDI R30 , LOW ( 0x100 )
0002cf e0f1     +LDI R31 , HIGH ( 0x100 )
0002d0 e060     +LDI R22 , BYTE3 ( 0x100 )
0002d1 e070     +LDI R23 , BYTE4 ( 0x100 )
                 	__GETD1N 0x100
0002d2 940e 058b 	CALL __DIVD21
0002d4 940e 0472 	CALL __CDF1
0002d6 940e 05b4 	CALL __PUTPARD1
0002d8 940e 038c 	CALL _floor
0002da 940e 043b 	CALL __CFD1
0002dc 940e 03fd 	CALL SUBOPT_0x8
                 ; 0000 0115 
                 ; 0000 0116         OCR1AH = (unsigned char)(ticks >> 8);
0002de 940e 0402 	CALL SUBOPT_0x9
0002e0 940e 051f 	CALL __ASRW8
0002e2 bdeb      	OUT  0x2B,R30
                 ; 0000 0117         OCR1AL = (unsigned char)ticks;
0002e3 91e0 01fe 	LDS  R30,_ticks
0002e5 bdea      	OUT  0x2A,R30
                 ; 0000 0118     }
                 ; 0000 0119 }
                 _0x25:
0002e6 9622      	ADIW R28,2
0002e7 9508      	RET
                 
                 	.DSEG
                 _0x15:
00016d           	.BYTE 0x91
                 ;
                 ;
                 ;
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 011E {
                 
                 	.CSEG
                 _read_adc:
                 ; 0000 011F ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
0002e8 81e8      	LD   R30,Y
0002e9 b9e7      	OUT  0x7,R30
                 ; 0000 0120 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0121 delay_us(10);
                +
0002ea e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0002eb 958a     +DEC R24
0002ec f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0122 // Start the AD conversion
                 ; 0000 0123 ADCSRA|=0x40;
0002ed 9a36      	SBI  0x6,6
                 ; 0000 0124 // Wait for the AD conversion to complete
                 ; 0000 0125 while ((ADCSRA & 0x10)==0);
                 _0x2C:
0002ee 9b34      	SBIS 0x6,4
0002ef cffe      	RJMP _0x2C
                 ; 0000 0126 ADCSRA|=0x10;
0002f0 9a34      	SBI  0x6,4
                 ; 0000 0127 return ADCW;
0002f1 b1e4      	IN   R30,0x4
0002f2 b1f5      	IN   R31,0x4+1
                 _0x20A0002:
0002f3 9621      	ADIW R28,1
0002f4 9508      	RET
                 ; 0000 0128 }
                 ;
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
0002f5 91a9          ld   r26,y+
0002f6 91b9          ld   r27,y+
0002f7 27ee          clr  r30
0002f8 27ff          clr  r31
                 strlen0:
0002f9 916d          ld   r22,x+
0002fa 2366          tst  r22
0002fb f011          breq strlen1
0002fc 9631          adiw r30,1
0002fd cffb          rjmp strlen0
                 strlen1:
0002fe 9508          ret
                 _strncmp:
0002ff 2766          clr  r22
000300 2777          clr  r23
000301 9189          ld   r24,y+
000302 91e9          ld   r30,y+
000303 91f9          ld   r31,y+
000304 91a9          ld   r26,y+
000305 91b9          ld   r27,y+
                 strncmp0:
000306 2388          tst  r24
000307 f049          breq strncmp1
000308 958a          dec  r24
000309 916d          ld   r22,x+
00030a 9171          ld   r23,z+
00030b 1767          cp   r22,r23
00030c f421          brne strncmp1
00030d 2366          tst  r22
00030e f7b9          brne strncmp0
                 strncmp3:
00030f 27ee          clr  r30
000310 9508          ret
                 strncmp1:
000311 1b67          sub  r22,r23
000312 f3e1          breq strncmp3
000313 e0e1          ldi  r30,1
000314 f408          brcc strncmp2
000315 50e2          subi r30,2
                 strncmp2:
000316 9508          ret
                 _strstr:
000317 81aa          ldd  r26,y+2
000318 81bb          ldd  r27,y+3
000319 01cd          movw r24,r26
                 strstr0:
00031a 81e8          ld   r30,y
00031b 81f9          ldd  r31,y+1
                 strstr1:
00031c 9171          ld   r23,z+
00031d 2377          tst  r23
00031e f411          brne strstr2
00031f 01fc          movw r30,r24
000320 c009          rjmp strstr3
                 strstr2:
000321 916d          ld   r22,x+
000322 1767          cp   r22,r23
000323 f3c1          breq strstr1
000324 9601          adiw r24,1
000325 01dc          movw r26,r24
000326 2366          tst  r22
000327 f791          brne strstr0
000328 27ee          clr  r30
000329 27ff          clr  r31
                 strstr3:
00032a 940c 03a1 	JMP  _0x20A0001
                 
                 	.CSEG
                 _atoi:
00032c 81b9         	ldd  r27,y+1
00032d 81a8         	ld   r26,y
                 __atoi0:
00032e 91ec         	ld   r30,x
00032f 93ea      	ST   -Y,R30
000330 940e 03ab 	CALL _isspace
000332 23ee         	tst  r30
000333 f011         	breq __atoi1
000334 9611         	adiw r26,1
000335 cff8         	rjmp __atoi0
                 __atoi1:
000336 94e8         	clt
000337 91ec         	ld   r30,x
000338 32ed         	cpi  r30,'-'
000339 f411         	brne __atoi2
00033a 9468         	set
00033b c002         	rjmp __atoi3
                 __atoi2:
00033c 32eb         	cpi  r30,'+'
00033d f409         	brne __atoi4
                 __atoi3:
00033e 9611         	adiw r26,1
                 __atoi4:
00033f 2766         	clr  r22
000340 2777         	clr  r23
                 __atoi5:
000341 91ec         	ld   r30,x
000342 93ea      	ST   -Y,R30
000343 940e 03a3 	CALL _isdigit
000345 23ee         	tst  r30
000346 f079         	breq __atoi6
000347 01fb         	movw r30,r22
000348 0f66         	lsl  r22
000349 1f77         	rol  r23
00034a 0f66         	lsl  r22
00034b 1f77         	rol  r23
00034c 0f6e         	add  r22,r30
00034d 1f7f         	adc  r23,r31
00034e 0f66         	lsl  r22
00034f 1f77         	rol  r23
000350 91ed         	ld   r30,x+
000351 27ff         	clr  r31
000352 53e0         	subi r30,'0'
000353 0f6e         	add  r22,r30
000354 1f7f         	adc  r23,r31
000355 cfeb         	rjmp __atoi5
                 __atoi6:
000356 01fb         	movw r30,r22
000357 f41e         	brtc __atoi7
000358 95e0         	com  r30
000359 95f0         	com  r31
00035a 9631         	adiw r30,1
                 __atoi7:
00035b 9622         	adiw r28,2
00035c 9508         	ret
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
00035d 817b         ldd  r23,y+3
00035e 816a         ldd  r22,y+2
00035f 81f9         ldd  r31,y+1
000360 81e8         ld   r30,y
000361 fb77         bst  r23,7
000362 0f77         lsl  r23
000363 fd67         sbrc r22,7
000364 6071         sbr  r23,1
000365 2f97         mov  r25,r23
000366 579e         subi r25,0x7e
000367 f081         breq __ftrunc0
000368 f078         brcs __ftrunc0
000369 3198         cpi  r25,24
00036a f490         brsh __ftrunc1
00036b 27aa         clr  r26
00036c 27bb         clr  r27
00036d 2788         clr  r24
                 __ftrunc2:
00036e 9408         sec
00036f 9587         ror  r24
000370 95b7         ror  r27
000371 95a7         ror  r26
000372 959a         dec  r25
000373 f7d1         brne __ftrunc2
000374 23ea         and  r30,r26
000375 23fb         and  r31,r27
000376 2368         and  r22,r24
000377 c005         rjmp __ftrunc1
                 __ftrunc0:
000378 94e8         clt
000379 2777         clr  r23
00037a 27ee         clr  r30
00037b 27ff         clr  r31
00037c 2766         clr  r22
                 __ftrunc1:
00037d 776f         cbr  r22,0x80
00037e 9576         lsr  r23
00037f f408         brcc __ftrunc3
000380 6860         sbr  r22,0x80
                 __ftrunc3:
000381 f977         bld  r23,7
000382 91a9         ld   r26,y+
000383 91b9         ld   r27,y+
000384 9189         ld   r24,y+
000385 9199         ld   r25,y+
000386 17ea         cp   r30,r26
000387 07fb         cpc  r31,r27
000388 0768         cpc  r22,r24
000389 0779         cpc  r23,r25
00038a fb97         bst  r25,7
00038b 9508         ret
                 _floor:
00038c 940e 0407 	CALL SUBOPT_0xA
00038e 940e 05b4 	CALL __PUTPARD1
000390 940e 035d 	CALL _ftrunc
000392 940e 05af 	CALL __PUTD1S0
000394 f419          brne __floor1
                 __floor0:
000395 940e 0407 	CALL SUBOPT_0xA
000397 c009      	RJMP _0x20A0001
                 __floor1:
000398 f7e6          brtc __floor0
000399 940e 0407 	CALL SUBOPT_0xA
                +
00039b e0a0     +LDI R26 , LOW ( 0x3F800000 )
00039c e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00039d e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00039e e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00039f 940e 04a5 	CALL __SUBF12
                 _0x20A0001:
0003a1 9624      	ADIW R28,4
0003a2 9508      	RET
                 
                 	.CSEG
                 _isdigit:
0003a3 e0e1          ldi  r30,1
0003a4 91f9          ld   r31,y+
0003a5 33f0          cpi  r31,'0'
0003a6 f010          brlo isdigit0
0003a7 33fa          cpi  r31,'9'+1
0003a8 f008          brlo isdigit1
                 isdigit0:
0003a9 27ee          clr  r30
                 isdigit1:
0003aa 9508          ret
                 _isspace:
0003ab e0e1          ldi  r30,1
0003ac 91f9          ld   r31,y+
0003ad 32f0          cpi  r31,' '
0003ae f029          breq isspace1
0003af 30f9          cpi  r31,9
0003b0 f010          brlo isspace0
0003b1 30fe          cpi  r31,13+1
0003b2 f008          brlo isspace1
                 isspace0:
0003b3 27ee          clr  r30
                 isspace1:
0003b4 9508          ret
                 
                 	.DSEG
                 _ticks:
0001fe           	.BYTE 0x2
                 _tram:
000200           	.BYTE 0x4
                 _chuc:
000204           	.BYTE 0x4
                 _dvi:
000208           	.BYTE 0x4
                 _adc_out:
00020c           	.BYTE 0x4
                 _nhiet_do:
000210           	.BYTE 0x4
                 _receivedData:
000214           	.BYTE 0x14
                 __seed_G102:
000228           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
0003b5 91a0 0210 	LDS  R26,_nhiet_do
0003b7 91b0 0211 	LDS  R27,_nhiet_do+1
0003b9 9180 0212 	LDS  R24,_nhiet_do+2
0003bb 9190 0213 	LDS  R25,_nhiet_do+3
                +
0003bd e0ea     +LDI R30 , LOW ( 0xA )
0003be e0f0     +LDI R31 , HIGH ( 0xA )
0003bf e060     +LDI R22 , BYTE3 ( 0xA )
0003c0 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
0003c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0003c2 93e0 0204 	STS  _chuc,R30
0003c4 93f0 0205 	STS  _chuc+1,R31
0003c6 9360 0206 	STS  _chuc+2,R22
0003c8 9370 0207 	STS  _chuc+3,R23
0003ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0003cb 93e0 0208 	STS  _dvi,R30
0003cd 93f0 0209 	STS  _dvi+1,R31
0003cf 9360 020a 	STS  _dvi+2,R22
0003d1 9370 020b 	STS  _dvi+3,R23
0003d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
0003d4 91e0 0204 	LDS  R30,_chuc
0003d6 5de0      	SUBI R30,-LOW(48)
0003d7 93ea      	ST   -Y,R30
0003d8 940e 0169 	CALL _uart_char_send
0003da 91e0 0208 	LDS  R30,_dvi
0003dc 5de0      	SUBI R30,-LOW(48)
0003dd 93ea      	ST   -Y,R30
0003de 940c 0169 	JMP  _uart_char_send
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0003e0 93fa      	ST   -Y,R31
0003e1 93ea      	ST   -Y,R30
0003e2 940c 016e 	JMP  _uart_string_send
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x5:
0003e4 920a      	ST   -Y,R0
0003e5 921a      	ST   -Y,R1
0003e6 92fa      	ST   -Y,R15
0003e7 936a      	ST   -Y,R22
0003e8 937a      	ST   -Y,R23
0003e9 938a      	ST   -Y,R24
0003ea 939a      	ST   -Y,R25
0003eb 93aa      	ST   -Y,R26
0003ec 93ba      	ST   -Y,R27
0003ed 93ea      	ST   -Y,R30
0003ee 93fa      	ST   -Y,R31
0003ef b7ef      	IN   R30,SREG
0003f0 93ea      	ST   -Y,R30
0003f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x6:
0003f2 81e8      	LD   R30,Y
0003f3 81f9      	LDD  R31,Y+1
0003f4 93fa      	ST   -Y,R31
0003f5 93ea      	ST   -Y,R30
0003f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:42 WORDS
                 SUBOPT_0x7:
0003f7 93fa      	ST   -Y,R31
0003f8 93ea      	ST   -Y,R30
0003f9 940e 0317 	CALL _strstr
0003fb 9730      	SBIW R30,0
0003fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
0003fd 93e0 01fe 	STS  _ticks,R30
0003ff 93f0 01ff 	STS  _ticks+1,R31
000401 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000402 91e0 01fe 	LDS  R30,_ticks
000404 91f0 01ff 	LDS  R31,_ticks+1
000406 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000407 940e 05aa 	CALL __GETD1S0
000409 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00040a 91e9      	ld   r30,y+
00040b 91f9      	ld   r31,y+
00040c 9630      	adiw r30,0
00040d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00040e ed80     +LDI R24 , LOW ( 0x7D0 )
00040f e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000410 9701     +SBIW R24 , 1
000411 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000412 95a8      	wdr
000413 9731      	sbiw r30,1
000414 f7c9      	brne __delay_ms0
                 __delay_ms1:
000415 9508      	ret
                 
                 __REPACK:
000416 e850      	LDI  R21,0x80
000417 2757      	EOR  R21,R23
000418 f411      	BRNE __REPACK0
000419 935f      	PUSH R21
00041a c0ca      	RJMP __ZERORES
                 __REPACK0:
00041b 3f5f      	CPI  R21,0xFF
00041c f031      	BREQ __REPACK1
00041d 0f66      	LSL  R22
00041e 0c00      	LSL  R0
00041f 9557      	ROR  R21
000420 9567      	ROR  R22
000421 2f75      	MOV  R23,R21
000422 9508      	RET
                 __REPACK1:
000423 935f      	PUSH R21
000424 2000      	TST  R0
000425 f00a      	BRMI __REPACK2
000426 c0ca      	RJMP __MAXRES
                 __REPACK2:
000427 c0c3      	RJMP __MINRES
                 
                 __UNPACK:
000428 e850      	LDI  R21,0x80
000429 2e19      	MOV  R1,R25
00042a 2215      	AND  R1,R21
00042b 0f88      	LSL  R24
00042c 1f99      	ROL  R25
00042d 2795      	EOR  R25,R21
00042e 0f55      	LSL  R21
00042f 9587      	ROR  R24
                 
                 __UNPACK1:
000430 e850      	LDI  R21,0x80
000431 2e07      	MOV  R0,R23
000432 2205      	AND  R0,R21
000433 0f66      	LSL  R22
000434 1f77      	ROL  R23
000435 2775      	EOR  R23,R21
000436 0f55      	LSL  R21
000437 9567      	ROR  R22
000438 9508      	RET
                 
                 __CFD1U:
000439 9468      	SET
00043a c001      	RJMP __CFD1U0
                 __CFD1:
00043b 94e8      	CLT
                 __CFD1U0:
00043c 935f      	PUSH R21
00043d dff2      	RCALL __UNPACK1
00043e 3870      	CPI  R23,0x80
00043f f018      	BRLO __CFD10
000440 3f7f      	CPI  R23,0xFF
000441 f408      	BRCC __CFD10
000442 c0a2      	RJMP __ZERORES
                 __CFD10:
000443 e156      	LDI  R21,22
000444 1b57      	SUB  R21,R23
000445 f4aa      	BRPL __CFD11
000446 9551      	NEG  R21
000447 3058      	CPI  R21,8
000448 f40e      	BRTC __CFD19
000449 3059      	CPI  R21,9
                 __CFD19:
00044a f030      	BRLO __CFD17
00044b efef      	SER  R30
00044c efff      	SER  R31
00044d ef6f      	SER  R22
00044e e77f      	LDI  R23,0x7F
00044f f977      	BLD  R23,7
000450 c01a      	RJMP __CFD15
                 __CFD17:
000451 2777      	CLR  R23
000452 2355      	TST  R21
000453 f0b9      	BREQ __CFD15
                 __CFD18:
000454 0fee      	LSL  R30
000455 1fff      	ROL  R31
000456 1f66      	ROL  R22
000457 1f77      	ROL  R23
000458 955a      	DEC  R21
000459 f7d1      	BRNE __CFD18
00045a c010      	RJMP __CFD15
                 __CFD11:
00045b 2777      	CLR  R23
                 __CFD12:
00045c 3058      	CPI  R21,8
00045d f028      	BRLO __CFD13
00045e 2fef      	MOV  R30,R31
00045f 2ff6      	MOV  R31,R22
000460 2f67      	MOV  R22,R23
000461 5058      	SUBI R21,8
000462 cff9      	RJMP __CFD12
                 __CFD13:
000463 2355      	TST  R21
000464 f031      	BREQ __CFD15
                 __CFD14:
000465 9576      	LSR  R23
000466 9567      	ROR  R22
000467 95f7      	ROR  R31
000468 95e7      	ROR  R30
000469 955a      	DEC  R21
00046a f7d1      	BRNE __CFD14
                 __CFD15:
00046b 2000      	TST  R0
00046c f40a      	BRPL __CFD16
00046d d0a9      	RCALL __ANEGD1
                 __CFD16:
00046e 915f      	POP  R21
00046f 9508      	RET
                 
                 __CDF1U:
000470 9468      	SET
000471 c001      	RJMP __CDF1U0
                 __CDF1:
000472 94e8      	CLT
                 __CDF1U0:
000473 9730      	SBIW R30,0
000474 4060      	SBCI R22,0
000475 4070      	SBCI R23,0
000476 f0b1      	BREQ __CDF10
000477 2400      	CLR  R0
000478 f026      	BRTS __CDF11
000479 2377      	TST  R23
00047a f412      	BRPL __CDF11
00047b 9400      	COM  R0
00047c d09a      	RCALL __ANEGD1
                 __CDF11:
00047d 2e17      	MOV  R1,R23
00047e e17e      	LDI  R23,30
00047f 2011      	TST  R1
                 __CDF12:
000480 f032      	BRMI __CDF13
000481 957a      	DEC  R23
000482 0fee      	LSL  R30
000483 1fff      	ROL  R31
000484 1f66      	ROL  R22
000485 1c11      	ROL  R1
000486 cff9      	RJMP __CDF12
                 __CDF13:
000487 2fef      	MOV  R30,R31
000488 2ff6      	MOV  R31,R22
000489 2d61      	MOV  R22,R1
00048a 935f      	PUSH R21
00048b df8a      	RCALL __REPACK
00048c 915f      	POP  R21
                 __CDF10:
00048d 9508      	RET
                 
                 __SWAPACC:
00048e 934f      	PUSH R20
00048f 01af      	MOVW R20,R30
000490 01fd      	MOVW R30,R26
000491 01da      	MOVW R26,R20
000492 01ab      	MOVW R20,R22
000493 01bc      	MOVW R22,R24
000494 01ca      	MOVW R24,R20
000495 2d40      	MOV  R20,R0
000496 2c01      	MOV  R0,R1
000497 2e14      	MOV  R1,R20
000498 914f      	POP  R20
000499 9508      	RET
                 
                 __UADD12:
00049a 0fea      	ADD  R30,R26
00049b 1ffb      	ADC  R31,R27
00049c 1f68      	ADC  R22,R24
00049d 9508      	RET
                 
                 __NEGMAN1:
00049e 95e0      	COM  R30
00049f 95f0      	COM  R31
0004a0 9560      	COM  R22
0004a1 5fef      	SUBI R30,-1
0004a2 4fff      	SBCI R31,-1
0004a3 4f6f      	SBCI R22,-1
0004a4 9508      	RET
                 
                 __SUBF12:
0004a5 935f      	PUSH R21
0004a6 df81      	RCALL __UNPACK
0004a7 3890      	CPI  R25,0x80
0004a8 f149      	BREQ __ADDF129
0004a9 e850      	LDI  R21,0x80
0004aa 2615      	EOR  R1,R21
                 
                 __ADDF120:
0004ab 3870      	CPI  R23,0x80
0004ac f121      	BREQ __ADDF128
                 __ADDF121:
0004ad 2f57      	MOV  R21,R23
0004ae 1b59      	SUB  R21,R25
0004af f12b      	BRVS __ADDF1211
0004b0 f412      	BRPL __ADDF122
0004b1 dfdc      	RCALL __SWAPACC
0004b2 cffa      	RJMP __ADDF121
                 __ADDF122:
0004b3 3158      	CPI  R21,24
0004b4 f018      	BRLO __ADDF123
0004b5 27aa      	CLR  R26
0004b6 27bb      	CLR  R27
0004b7 2788      	CLR  R24
                 __ADDF123:
0004b8 3058      	CPI  R21,8
0004b9 f028      	BRLO __ADDF124
0004ba 2fab      	MOV  R26,R27
0004bb 2fb8      	MOV  R27,R24
0004bc 2788      	CLR  R24
0004bd 5058      	SUBI R21,8
0004be cff9      	RJMP __ADDF123
                 __ADDF124:
0004bf 2355      	TST  R21
0004c0 f029      	BREQ __ADDF126
                 __ADDF125:
0004c1 9586      	LSR  R24
0004c2 95b7      	ROR  R27
0004c3 95a7      	ROR  R26
0004c4 955a      	DEC  R21
0004c5 f7d9      	BRNE __ADDF125
                 __ADDF126:
0004c6 2d50      	MOV  R21,R0
0004c7 2551      	EOR  R21,R1
0004c8 f072      	BRMI __ADDF127
0004c9 dfd0      	RCALL __UADD12
0004ca f438      	BRCC __ADDF129
0004cb 9567      	ROR  R22
0004cc 95f7      	ROR  R31
0004cd 95e7      	ROR  R30
0004ce 9573      	INC  R23
0004cf f413      	BRVC __ADDF129
0004d0 c020      	RJMP __MAXRES
                 __ADDF128:
0004d1 dfbc      	RCALL __SWAPACC
                 __ADDF129:
0004d2 df43      	RCALL __REPACK
0004d3 915f      	POP  R21
0004d4 9508      	RET
                 __ADDF1211:
0004d5 f7d8      	BRCC __ADDF128
0004d6 cffb      	RJMP __ADDF129
                 __ADDF127:
0004d7 1bea      	SUB  R30,R26
0004d8 0bfb      	SBC  R31,R27
0004d9 0b68      	SBC  R22,R24
0004da f051      	BREQ __ZERORES
0004db f410      	BRCC __ADDF1210
0004dc 9400      	COM  R0
0004dd dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
0004de 2366      	TST  R22
0004df f392      	BRMI __ADDF129
0004e0 0fee      	LSL  R30
0004e1 1fff      	ROL  R31
0004e2 1f66      	ROL  R22
0004e3 957a      	DEC  R23
0004e4 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0004e5 27ee      	CLR  R30
0004e6 27ff      	CLR  R31
0004e7 2766      	CLR  R22
0004e8 2777      	CLR  R23
0004e9 915f      	POP  R21
0004ea 9508      	RET
                 
                 __MINRES:
0004eb efef      	SER  R30
0004ec efff      	SER  R31
0004ed e76f      	LDI  R22,0x7F
0004ee ef7f      	SER  R23
0004ef 915f      	POP  R21
0004f0 9508      	RET
                 
                 __MAXRES:
0004f1 efef      	SER  R30
0004f2 efff      	SER  R31
0004f3 e76f      	LDI  R22,0x7F
0004f4 e77f      	LDI  R23,0x7F
0004f5 915f      	POP  R21
0004f6 9508      	RET
                 
                 __CMPF12:
0004f7 2399      	TST  R25
0004f8 f09a      	BRMI __CMPF120
0004f9 2377      	TST  R23
0004fa f042      	BRMI __CMPF121
0004fb 1797      	CP   R25,R23
0004fc f048      	BRLO __CMPF122
0004fd f429      	BRNE __CMPF121
0004fe 17ae      	CP   R26,R30
0004ff 07bf      	CPC  R27,R31
000500 0786      	CPC  R24,R22
000501 f020      	BRLO __CMPF122
000502 f031      	BREQ __CMPF123
                 __CMPF121:
000503 9498      	CLZ
000504 9488      	CLC
000505 9508      	RET
                 __CMPF122:
000506 9498      	CLZ
000507 9408      	SEC
000508 9508      	RET
                 __CMPF123:
000509 9418      	SEZ
00050a 9488      	CLC
00050b 9508      	RET
                 __CMPF120:
00050c 2377      	TST  R23
00050d f7c2      	BRPL __CMPF122
00050e 1797      	CP   R25,R23
00050f f398      	BRLO __CMPF121
000510 f7a9      	BRNE __CMPF122
000511 17ea      	CP   R30,R26
000512 07fb      	CPC  R31,R27
000513 0768      	CPC  R22,R24
000514 f388      	BRLO __CMPF122
000515 f399      	BREQ __CMPF123
000516 cfec      	RJMP __CMPF121
                 
                 __ANEGD1:
000517 95f0      	COM  R31
000518 9560      	COM  R22
000519 9570      	COM  R23
00051a 95e1      	NEG  R30
00051b 4fff      	SBCI R31,-1
00051c 4f6f      	SBCI R22,-1
00051d 4f7f      	SBCI R23,-1
00051e 9508      	RET
                 
                 __ASRW8:
00051f 2fef      	MOV  R30,R31
000520 27ff      	CLR  R31
000521 fde7      	SBRC R30,7
000522 efff      	SER  R31
000523 9508      	RET
                 
                 __CWD1:
000524 2f6f      	MOV  R22,R31
000525 0f66      	ADD  R22,R22
000526 0b66      	SBC  R22,R22
000527 2f76      	MOV  R23,R22
000528 9508      	RET
                 
                 __CWD2:
000529 2f8b      	MOV  R24,R27
00052a 0f88      	ADD  R24,R24
00052b 0b88      	SBC  R24,R24
00052c 2f98      	MOV  R25,R24
00052d 9508      	RET
                 
                 __MULD12U:
00052e 9f7a      	MUL  R23,R26
00052f 2d70      	MOV  R23,R0
000530 9f6b      	MUL  R22,R27
000531 0d70      	ADD  R23,R0
000532 9ff8      	MUL  R31,R24
000533 0d70      	ADD  R23,R0
000534 9fe9      	MUL  R30,R25
000535 0d70      	ADD  R23,R0
000536 9f6a      	MUL  R22,R26
000537 2d60      	MOV  R22,R0
000538 0d71      	ADD  R23,R1
000539 9ffb      	MUL  R31,R27
00053a 0d60      	ADD  R22,R0
00053b 1d71      	ADC  R23,R1
00053c 9fe8      	MUL  R30,R24
00053d 0d60      	ADD  R22,R0
00053e 1d71      	ADC  R23,R1
00053f 2788      	CLR  R24
000540 9ffa      	MUL  R31,R26
000541 2df0      	MOV  R31,R0
000542 0d61      	ADD  R22,R1
000543 1f78      	ADC  R23,R24
000544 9feb      	MUL  R30,R27
000545 0df0      	ADD  R31,R0
000546 1d61      	ADC  R22,R1
000547 1f78      	ADC  R23,R24
000548 9fea      	MUL  R30,R26
000549 2de0      	MOV  R30,R0
00054a 0df1      	ADD  R31,R1
00054b 1f68      	ADC  R22,R24
00054c 1f78      	ADC  R23,R24
00054d 9508      	RET
                 
                 __MULD12:
00054e d048      	RCALL __CHKSIGND
00054f dfde      	RCALL __MULD12U
000550 f40e      	BRTC __MULD121
000551 dfc5      	RCALL __ANEGD1
                 __MULD121:
000552 9508      	RET
                 
                 __DIVW21U:
000553 2400      	CLR  R0
000554 2411      	CLR  R1
000555 e190      	LDI  R25,16
                 __DIVW21U1:
000556 0faa      	LSL  R26
000557 1fbb      	ROL  R27
000558 1c00      	ROL  R0
000559 1c11      	ROL  R1
00055a 1a0e      	SUB  R0,R30
00055b 0a1f      	SBC  R1,R31
00055c f418      	BRCC __DIVW21U2
00055d 0e0e      	ADD  R0,R30
00055e 1e1f      	ADC  R1,R31
00055f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000560 60a1      	SBR  R26,1
                 __DIVW21U3:
000561 959a      	DEC  R25
000562 f799      	BRNE __DIVW21U1
000563 01fd      	MOVW R30,R26
000564 01d0      	MOVW R26,R0
000565 9508      	RET
                 
                 __DIVD21U:
000566 933f      	PUSH R19
000567 934f      	PUSH R20
000568 935f      	PUSH R21
000569 2400      	CLR  R0
00056a 2411      	CLR  R1
00056b 2744      	CLR  R20
00056c 2755      	CLR  R21
00056d e230      	LDI  R19,32
                 __DIVD21U1:
00056e 0faa      	LSL  R26
00056f 1fbb      	ROL  R27
000570 1f88      	ROL  R24
000571 1f99      	ROL  R25
000572 1c00      	ROL  R0
000573 1c11      	ROL  R1
000574 1f44      	ROL  R20
000575 1f55      	ROL  R21
000576 1a0e      	SUB  R0,R30
000577 0a1f      	SBC  R1,R31
000578 0b46      	SBC  R20,R22
000579 0b57      	SBC  R21,R23
00057a f428      	BRCC __DIVD21U2
00057b 0e0e      	ADD  R0,R30
00057c 1e1f      	ADC  R1,R31
00057d 1f46      	ADC  R20,R22
00057e 1f57      	ADC  R21,R23
00057f c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000580 60a1      	SBR  R26,1
                 __DIVD21U3:
000581 953a      	DEC  R19
000582 f759      	BRNE __DIVD21U1
000583 01fd      	MOVW R30,R26
000584 01bc      	MOVW R22,R24
000585 01d0      	MOVW R26,R0
000586 01ca      	MOVW R24,R20
000587 915f      	POP  R21
000588 914f      	POP  R20
000589 913f      	POP  R19
00058a 9508      	RET
                 
                 __DIVD21:
00058b d00b      	RCALL __CHKSIGND
00058c dfd9      	RCALL __DIVD21U
00058d f40e      	BRTC __DIVD211
00058e df88      	RCALL __ANEGD1
                 __DIVD211:
00058f 9508      	RET
                 
                 __MODW21U:
000590 dfc2      	RCALL __DIVW21U
000591 01fd      	MOVW R30,R26
000592 9508      	RET
                 
                 __MODD21U:
000593 dfd2      	RCALL __DIVD21U
000594 01fd      	MOVW R30,R26
000595 01bc      	MOVW R22,R24
000596 9508      	RET
                 
                 __CHKSIGND:
000597 94e8      	CLT
000598 ff77      	SBRS R23,7
000599 c002      	RJMP __CHKSD1
00059a df7c      	RCALL __ANEGD1
00059b 9468      	SET
                 __CHKSD1:
00059c ff97      	SBRS R25,7
00059d c00b      	RJMP __CHKSD2
00059e 2400      	CLR  R0
00059f 95a0      	COM  R26
0005a0 95b0      	COM  R27
0005a1 9580      	COM  R24
0005a2 9590      	COM  R25
0005a3 9611      	ADIW R26,1
0005a4 1d80      	ADC  R24,R0
0005a5 1d90      	ADC  R25,R0
0005a6 f800      	BLD  R0,0
0005a7 9403      	INC  R0
0005a8 fa00      	BST  R0,0
                 __CHKSD2:
0005a9 9508      	RET
                 
                 __GETD1S0:
0005aa 81e8      	LD   R30,Y
0005ab 81f9      	LDD  R31,Y+1
0005ac 816a      	LDD  R22,Y+2
0005ad 817b      	LDD  R23,Y+3
0005ae 9508      	RET
                 
                 __PUTD1S0:
0005af 83e8      	ST   Y,R30
0005b0 83f9      	STD  Y+1,R31
0005b1 836a      	STD  Y+2,R22
0005b2 837b      	STD  Y+3,R23
0005b3 9508      	RET
                 
                 __PUTPARD1:
0005b4 937a      	ST   -Y,R23
0005b5 936a      	ST   -Y,R22
0005b6 93fa      	ST   -Y,R31
0005b7 93ea      	ST   -Y,R30
0005b8 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  43 r1 :  27 r2 :   0 r3 :   0 r4 :   5 r5 :   0 r6 :   5 r7 :   3 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   6 r17:  11 r18:   0 r19:   4 r20:  15 r21:  52 r22:  96 r23:  89 
r24:  62 r25:  31 r26:  64 r27:  37 r28:   5 r29:   1 r30: 250 r31: 120 
x  :  12 y  : 108 z  :  10 
Registers used: 24 out of 35 (68.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  19 add   :  18 
adiw  :  14 and   :   5 andi  :   0 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   9 brcs  :   1 break :   0 breq  :  39 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   0 brmi  :   6 brne  :  23 brpl  :   5 brsh  :   2 brtc  :   5 
brts  :   1 brvc  :   2 brvs  :   1 bset  :   0 bst   :   3 call  :  89 
cbi   :   8 cbr   :   1 clc   :   2 clh   :   0 cli   :   1 cln   :   0 
clr   :  52 cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :  14 
cp    :   9 cpc   :   8 cpi   :  21 cpse  :   0 dec   :  11 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   2 jmp   :  28 ld    :  49 ldd   :  18 ldi   : 144 
lds   :  14 lpm   :   7 lsl   :  15 lsr   :   3 mov   :  28 movw  :  37 
mul   :  10 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   1 out   :  41 pop   :  10 push  :   9 rcall :  24 ret   :  49 
reti  :   2 rjmp  :  37 rol   :  23 ror   :  15 sbc   :   8 sbci  :   8 
sbi   :  10 sbic  :   0 sbis  :   2 sbiw  :   9 sbr   :   4 sbrc  :   2 
sbrs  :   2 sec   :   2 seh   :   0 sei   :   1 sen   :   0 ser   :   9 
ses   :   0 set   :   4 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  53 std   :   3 sts   :  22 sub   :   6 subi  :  11 swap  :   0 
tst   :  18 wdr   :   1 
Instructions used: 77 out of 116 (66.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b72   2608    322   2930   16384  17.9%
[.dseg] 0x000060 0x00022c      0    204    204    1119  18.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
